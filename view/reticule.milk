// -*-javascript-*-

keywords = null
sources = null
relative = null

function int2roman(n):
    r = ''
    decimals = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    roman = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']

    for i, _ in decimals:
        while n >= decimals[i]:
            r += roman[i]
            n -= decimals[i]

    return r

function findBlock($el):
    while $el.css('display') == 'inline':
        $el = $el.parent()

    return $el

function typesetMath(el):
    MathJax.Hub.Queue | ['Typeset', MathJax.Hub, el]

function levenshtein(a, b):
    for [x, y] in [[a, b], [b, a]] if x.length == 0:
        return y.length

    // Initialize matrix
    matrix = [[i] for i in [0...b.length]]
    matrix[0] = [j for j in [0...a.length]]

    for i in [1...b.length]:
        for j in [1...a.length]:
            if b[i - 1] == a[j - 1]:
                matrix[i][j] = matrix[i - 1][j - 1]
            else:
                matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 2, matrix[i][j - 1] + 1, matrix[i - 1][j] + 1)

    return matrix[b.length][a.length]

function loadExtract($block, path):
    $section = $('<section />', { 'class': 'extract' }).append
        | $('<article />').append
        | $('<p />', { 'html': 'Loading &hellip;' })
    $block.after($section)

    $section.load(path.replace('#', ' #'), function():
        prepare($section)

        // Relink label
        $section.find('a.label').attr('href', path)

        // Add close button
        $section.children('article').removeAttr('id').prepend | $('<a />', {
            'class': 'close'
            'href': '#'
            'html': '&#10005;'
        }).click(() => $section.remove() && false)
    )

    return false

function wireKeywords():
    // Load keywords if necessary
    if keywords == null && sources == null:
        $.getJSON(relative + 'index/keywords.json',
            data => ([keywords, sources] = [Object.keys(data), data]))

    timeoutId = null

    eventHandler = function(event):
        if keywords == null || sources == null: return

        selection = window.getSelection()
        range = selection.getRangeAt(0)
        keyword = selection.toString().trim()

        if keyword.length <= 2: return

        // Search for key
        min = [null, -1]
        for key in keywords:
            distance = levenshtein(key, keyword)
            if min[0] == null || distance < min[1]:
                min = [key, distance]

        [key, distance] = min
        if key == null || distance > Math.min(3, key.length, keyword.length):
            return

        // Create palette
        $('body > ul.palette').remove()
        $palette = $('<ul />', { 'class': 'palette' }).css({ 'top': -9999, 'left': -9999 })
        $block = findBlock | $(range.startContainer.parentNode)

        for [path, id, context] in sources[key]:
            $palette.append | $('<li />').append | $('<a />', {
                'href': relative + path + id
                'class': 'index'
                'text': id
                'title': context
            })
            .click(() => loadExtract($block, this.href))
            .mouseup(e => e.stopPropagation())

        $(document.body).append($palette)

        [width, height] = [0, 0]
        height = Math.ceil | $palette.find('a').each(
            () => (width += Math.ceil | $(this).innerWidth())
        ).first().innerHeight()
        [top, left] = [event.pageY - height - 10, event.pageX - width / 2].map(Math.round)

        if range.getBoundingClientRect != null:
            rect = range.getBoundingClientRect()
            r = document.body.parentNode.getBoundingClientRect()
            top = Math.round(rect.top - r.top - height - 10)
            left = Math.round(rect.left - r.left + (rect.right - rect.left) / 2 - width / 2)

        $palette.css({ top, left, width, height, opacity: 1 })

    $('main').on('dblclick', eventHandler)

    $(document).on('selectionchange', _) | function(e):
        if timeoutId != null:
            clearTimeout(timeoutId)

        timeoutId = setTimeout(() => eventHandler(e), 500)

    $(document.body).mouseup | function():
        $palettes = $('body > ul.palette').css('opacity', 0)
        setTimeout(() => $palettes.remove(), 200)

function prepare($el, math = true):
    // Prettify numbered lists
    $el.find('ol').each | function():
        if $(this).css('list-style') == 'none': return

        $(this).css('list-style', 'none').children('li').each | function(i):
            roman = int2roman(i + 1).toLowerCase()
            $(this).prepend | $('<span />', {
                'class': 'roman'
                'text': '(' + roman + ')'
            })

    // Wire tag link events
    $el.find('a.tag').click | function():
        href = relative + $(this).attr('data-path')
        id = href[href.indexOf('#')...]

        $block = findBlock | $(this)
        return loadExtract($block, href)

    // Invoke MathJax
    if math: typesetMath($el[0])

$(document).ready | function():
    relative = $('nav > .inner > h1 > a').attr('href')
    hash = window.location.hash

    wireKeywords()
    prepare($('main'), false)

    // Typeset
    if hash[0] == '#':
        typesetMath(document.body)
        MathJax.Hub.Queue(() => $(window).scrollTop | $(hash).offset().top)
    else:
        // Start step by step math typesetting
        MathJax.Hub.Queue | ['PreProcess', MathJax.Hub]

        elements = $('article').toArray()
        for i in [0, 2, ..., elements.length - 3]:
            MathJax.Hub.Queue | ['Process', MathJax.Hub, elements[i ... i + 2]]

        MathJax.Hub.Queue | ['Process',
            MathJax.Hub,
            $(['h' + i for i in [1...6]].concat(['.toc', '.nav', '.meta']).join(', ')).toArray()
        ]
