// -*-javascript-*-

keywords = null
sources = null
relative = null

function int2roman(n):
    r = ''
    decimals = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    roman = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']

    for i, _ in decimals:
        while n >= decimals[i]:
            r += roman[i]
            n -= decimals[i]

    return r

function findBlock($el):
    while $el.css('display') == 'inline':
        $el = $el.parent()

    return $el

function similar(x, y):
    min = Math.min(x.length, y.length) - 1
    max = Math.max(x.length, y.length) - 1
    map = z => z[0...min].toLowerCase()

    return max - min <= 3 && map(x) == map(y)

function loadExtract($block, path):
    $('body > ul.palette').remove()

    $section = $('<section />', { 'class': 'extract' })
        .append($('<article />').append($('<p />', { 'html': 'Loading &hellip;' })))
    $block.after($section)

    $section.load(path.replace('#', ' #'), function():
        ready($section)

        // Relink label
        $section.find('a.label').attr('href', path)

        // Add close button
        $section.children('article').removeAttr('id').prepend($('<a />', {
            'class': 'close'
            'href': '#'
            'html': '&#10005;'
        }).on('click', () => $section.remove() && false))
    )

    return false

function wireKeywords():
    $('main').dblclick(function(e):
        if keywords == null || sources == null: return

        selection = window.getSelection()
        range = selection.getRangeAt(0)
        keyword = selection.toString().trim()

        if keyword == '': return
        for k in [keywords.length - 1 ... -1] if k == -1 || similar(keywords[k], keyword): break
        if k == -1: return

        key = keywords[k]

        // Create palette
        $('body > ul.palette').remove()
        $palette = $('<ul />', { 'class': 'palette' }).css({ 'top': -9999, 'left': -9999 })
        $block = findBlock($(range.startContainer.parentNode))

        for [path, id, context] in sources[key]:
            $palette.append($('<li />').append($('<a />', {
                'href': relative + path + id
                'class': 'index'
                'text': id
                'title': context
            }).click(() => loadExtract($block, this.href))))

        $(document.body).append($palette)

        [width, height] = [0, 0]
        height = $palette.find('a').each(() => (width += $(this).innerWidth())).first().innerHeight()
        [top, left] = [e.pageY - height - 20, e.pageX - width / 2]

        if range.getBoundingClientRect != null:
            rect = range.getBoundingClientRect()
            r = document.body.parentNode.getBoundingClientRect()
            top = rect.top - r.top - height - 20
            left = rect.left - r.left + (rect.right - rect.left) / 2 - width / 2

        $palette.css({ top, left, width })
    )
    $(document.body).click(() => $('body > ul.palette').remove())

function ready($el, math = true):
    // Load keywords if necessary
    if keywords == null && sources == null:
        $.getJSON(relative + 'index/keywords.json',
            data => ([keywords, sources] = [Object.keys(data), data]))

    // Prettify numbered lists
    $el.find('ol').each(function():
        if $(this).css('list-style') == 'none': return

        $(this).css('list-style', 'none').children('li').each(function(i):
            roman = int2roman(i + 1).toLowerCase()
            $(this).prepend($('<span />', {
                'class': 'roman'
                'text': '(' + roman + ')'
            }))
        )
    )

    // Wire tag link events
    $el.find('a.tag').click(function():
        href = relative + $(this).attr('data-path')
        id = href[href.indexOf('#')...]

        $block = findBlock($(this))
        return loadExtract($block, href)
    )

    // Invoke MathJax
    if math:
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, $el[0]])

$(document).ready(function():
    relative = $('nav > .inner > h1 > a').attr('href')
    wireKeywords()
    ready($('main'), false)
)
