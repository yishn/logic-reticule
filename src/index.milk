fs = require('fs')
path = require('path')
marked = require('marked').setOptions({ smartypants: true })

context = exports ?? (window.reticule = {})

function readdirRecursive(dirname):
    items = [path.join(dirname, item) for item in fs.readdirSync(dirname)]

    for item in items if fs.statSync(item).isDirectory():
        items = items.concat(readdirRecursive(item))

    return items

class HtmlRenderer extends marked.Renderer:
    function code(code):
        return '$$' + code + '$$'

    function codespan(code):
        return '$' + code + '$'

getInfo = JSON.parse @ fs.readFileSync(_, 'utf8') @ path.join
context.getBookInfo = getInfo(_, 'book.json')
context.getSectionInfo = getInfo(_, 'section.json')

context.getToc = function(dirname):
    items = [path.join(dirname, item) for item in fs.readdirSync(dirname)]
    toc = []

    for item in items: try:
        info = context.getSectionInfo(item)
        subtoc = context.getToc(item)

        if subtoc.length > 0: info.toc = subtoc
        toc.push(info)

    return toc

context.extractTags = function(filename):
    tags = []

    try:
        content = fs.readFileSync(filename, 'utf8').replace(/\r\n/g, '\n').split('\n')
        tagheaders = [first, ...] => first == '#'
        tagslength = content.filter(tagheaders).length

        if length == 0: return []
        for i, l in content if tagheaders(l): break

        while tags.length < tagslength:
            for j in [i + 1 ...] if !content[j] || tagheaders(content[j]): break
            tags.push(context.parseTag(content[i ... j - 1]))
            i = j

    return tags

context.parseTag = function(lines):
    separator = x => x.split('').every(y => y == '-')
    for k in [0...] if !lines[k] || separator(lines[k]): break

    assertion = lines[1 ... k - 1].join('\n')
    proof = k + 1 < lines.length ? lines[k + 1 ...].join('\n') : null

    return { id: lines[0], assertion: assertion, proof: proof }

context.getAllTags = function(dirname):
    files = readdirRecursive(dirname).filter(x => path.basename(x) == 'tags.md')
    tags = []

    for file in files:
        tags = tags.concat(context.extractTags(file))

    return tags

context.getTagById = function(dirname, id):
    return context.getAllTags(dirname).filter(tag => tag.id == id)[0] ?? null

context.getDependencies = function(tag):
    options = { renderer: new HtmlRenderer() }
    html = [marked(v, options) for k, v in tag if k != 'id'].join('\n')
    dependencies = []

    regex = /<a href="(#[^"]*)"/g
    while (match = regex.exec(html)) != null:
        dependencies.push(match[1])

    return dependencies
