// -*-javascript-*-

fs = require('fs')
path = require('path').posix
diacritic = require('diacritic')
marked = require('marked').setOptions({ smartypants: true })
milk = require('milk-lang')

cache = {}

class ReticuleRenderer extends marked.Renderer:
    function init(dirname, sectionpath):
        self.keywords = []
        self.dirname = dirname
        self.relative = path.join(path.relative(path.join(dirname, sectionpath), dirname), './')
        super.init()

    function code(code):
        return '<p class="math">$$$' + code + '$$$</p>'

    function codespan(code):
        return '<span class="math">$' + code + '$</span>'

    function link(href, title, text):
        out = '<a '

        if href[0] == '#':
            tag = exports.getTagById(self.dirname, href)
            href = path.join(self.relative, tag.path) + tag.id
            out += 'class="tag" data-path="' + tag.path + tag.id + '" '

        out += 'href="' + href + '"'
        if title: out += 'title="' + title + '"'
        out += '>' + text + '</a>'

        return out

    function del(text):
        k = text.indexOf('|')
        if k < 0: k = text.length

        tuple = [text[0 ... k - 1], text[k + 1 ...]]

        if self.keywords.every(x => x not equals tuple):
            self.keywords.push(tuple)

        return ''

function readdirRecursive(dirname):
    items = [path.join(dirname, item) for item in fs.readdirSync(dirname)]

    for item in items if fs.statSync(item).isDirectory():
        items = items.concat(readdirRecursive(item))

    return items

function fillTemplate(template, context):
    escaperegex = x => x.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")

    for k, v in context:
        template = template.replace(new RegExp('{{' + escaperegex(k) + '}}', 'g'), v)

    return template

exports.getBookInfo = JSON.parse @ fs.readFileSync(_, 'utf8') @ path.join(_, 'book.json')

exports.getLinearToc = function(toc):
    linear = []

    for item in toc:
        if 'toc' in item:
            sublinear = exports.extractLinearToc(item.toc)
            linear = linear.concat(sublinear)
        else:
            linear.push(item)

    return linear

exports.renderToc = function(toc, relative = './', currentpath = null):
    output = '<ol class="toc">\n'

    for item in toc:
        a = item.title
        if 'toc' not in item:
            a = '<a href="' + path.join(relative, item.path)
                + '" data-path="' + item.path + '">' + item.title + '</a>'

        li = '<li>' + a
        if currentpath == item.path:
            li = '<li class="current">' + a

        if 'toc' in item:
            subtoc = exports.renderToc(item.toc, relative, currentpath)
            li += subtoc

        li += '</li>\n'
        output += li

    return output + '</ol>'

exports.extractTags = function(filename, dirname):
    if filename not in cache:
        tags = []

        try:
            content = fs.readFileSync(filename, 'utf8').replace(/\r\n/g, '\n').split('\n')
            tagheaders = [first, ...] => first == '#'
            tagslength = content.filter(tagheaders).length

            if tagslength == 0: return []
            for i, l in content if tagheaders(l): break

            while tags.length < tagslength:
                for j in [i + 1 ...] if j == content.length || tagheaders(content[j]): break

                tag = exports.parseTag(content[i ... j - 1])
                tag.path = path.join(path.relative(dirname, path.join(filename, '..')), './')
                tags.push(tag)

                i = j

        cache[filename] = tags

    return cache[filename]

exports.renderTags = function(tags, dirname):
    output = ''
    keywords = {}

    for tag in tags:
        renderer = new ReticuleRenderer(dirname, tag.path)
        options = { renderer }
        output += '<article id="' + tag.id[1...] + '">\n' + marked(tag.assertion, options) + '\n'

        if tag.proof != null:
            output += marked(tag.proof, options) + '\n<p class="qed">$\\square$</p>'

        output += '</article>\n'

        for [keyword, context] in renderer.keywords:
            if keyword not in keywords:
                keywords[keyword] = [[tag.path, tag.id, context]]
            else:
                keywords[keyword].push([tag.path, tag.id, context])

    return [output, keywords]

exports.parseTag = function(lines):
    separator = x => x != '' && x.split('').every(y => y == '-')
    for k in [0...] if k == lines.length || separator(lines[k]): break

    j = lines[0].indexOf(':')
    id = j == -1 ? lines[0] : lines[0].substring(0, j)
    type = j == -1 ? '' : lines[0].substring(j + 1)
    assertion = lines[1 ... k - 1].join('\n').trim()
    proof = k + 1 < lines.length
        ? lines[k + 1 ...].join('\n').trim()
        : null

    prefix = '<a class="label" href="' + id + '">'
    if type.trim() != '':
        prefix += type + ' ' + id[1...].replace(/-/g, '.') + '.</a>\n\n'
    else:
        prefix += '&para;</a>\n\n'

    assertion = prefix + assertion

    if proof != null:
        prefix = '<strong class="label">Proof.</strong>\n\n'
        proof = prefix + proof

    return { id, type, assertion, proof }

exports.renderIndex = function(keywords, relative = './'):
    output = '<ul class="nav">'

    compare = (p, q, f) => f(p) == f(q) ? 0 : f(p) < f(q) ? -1 : 1
    map = x => diacritic.clean(x).toLowerCase().replace(/[^0-9a-zA-Z]/g, '')
    getAlpha = x => (a = map(x)[0]) == parseInt(a, 10) ? '#' : a

    keys = Object.keys(keywords)
    keys.sort(compare(_, _, map))

    if keys.length == 0:
        return '<p>No index.</p>'

    // Create alphas
    alphas = []
    for alpha in keys.map(getAlpha) if alpha not in alphas:
        alphas.push(alpha)

    for alpha in "#abcdefghijklmnopqrstuvwxyz":
        slug = alpha == '#' ? 'num' : alpha
        if alpha in alphas:
            output += '<li><a href="#' + slug + '">' + alpha.toUpperCase() + '</a></li> '
        else:
            output += '<li><span>' + alpha.toUpperCase() + '</span></li> '

    output += '</ul>\n<article>\n'

    // Generate tables
    for alpha in alphas:
        slug = alpha == '#' ? 'num' : alpha
        output += '<h2 class="alpha" id="' + slug + '"><a href="#' + slug + '">' + alpha + '</a></h2>\n'
            + '<ul class="index">\n'

        for keyword in keys.filter(x => getAlpha(x) == alpha):
            output += '<li><span>' + keyword + '</span> '

            for [p, id, context] in keywords[keyword]:
                output += '<a href="' + path.join(relative, p) + id
                    + '" data-path="' + p + id + '" class="tag index"'
                if context.trim() != '': output += ' title="' + context + '"'
                output += '>' + id + '</a> '

            output += '</li>\n'

        output += '</ul>\n'

    return output + '</article>'

exports.renderLinearNav = function(prev, next, relative = './'):
    output = '<p class="nav">\n'

    if prev != null:
        output += '<a href="' + path.join(relative, prev.path) + '" class="prev">&laquo; ' + prev.title + '</a>\n'
    if next != null:
        output += '<a href="' + path.join(relative, next.path) + '" class="next">' + next.title + ' &raquo;</a>\n'

    return output + '</p>'

exports.getAllTags = function(dirname):
    if dirname not in cache:
        files = readdirRecursive(dirname).filter(x => path.basename(x) == 'tags.md')
        tags = []

        for file in files:
            tags = tags.concat(exports.extractTags(file, dirname))

        cache[dirname] = tags

    return cache[dirname]

exports.getTagById = function(dirname, id):
    return exports.getAllTags(dirname).filter(tag => tag.id == id)[0] ?? null

exports.buildReticule = function(dirname):
    template = fs.readFileSync('../view/index.html', 'utf8')
    bookinfo = exports.getBookInfo(dirname)

    console.log('Generate table of contents...')

    toc = bookinfo.toc.slice(0)
    toc.push({ path: 'index/', title: 'Index' })
    linear = exports.getLinearToc(toc)

    alltags = exports.getAllTags(dirname)
    items = []
    keywords = {}

    for item in alltags.map(tag => tag.path) if item not in items:
        items.push(item)
        console.log('Processing ' + item + '...')

        try: fs.statSync(path.join(dirname, item, 'tags.md'))
        catch: continue

        // Look for prev/next section
        relative = path.join(path.relative(path.join(dirname, item), dirname), './')

        for k, i in linear if i.path == item: break
        nav = exports.renderLinearNav(linear[k - 1] ?? {
            title: 'Table of Contents'
            path: './'
        }, linear[k + 1], relative)

        // Load data
        sectioninfo = linear[k]
        tags = exports.extractTags(path.join(dirname, item, 'tags.md'), dirname)
        [html, kw] = exports.renderTags(tags, dirname)

        // Handle index
        for keyword, value in kw:
            if keyword not in keywords:
                keywords[keyword] = value
            else:
                keywords[keyword] = keywords[keyword].concat(value)

        // Write data
        fs.writeFileSync(path.join(dirname, item, 'index.html'), fillTemplate(template, {
            title: bookinfo.title
            toc: exports.renderToc(toc, relative, item)
            relative
            main: [
                '<h1>' + sectioninfo.title + '</h1>'
                nav
                html
                nav
            ].join('\n')
        }))

    console.log('Create front page...')

    nav = exports.renderLinearNav(null, linear[0], './')

    fs.writeFileSync(path.join(dirname, 'index.html'), fillTemplate(template, {
        title: bookinfo.title
        toc: exports.renderToc(toc)
        relative: './'
        main: [
            '<h1>' + bookinfo.title + '</h1>'
            '<p class="meta">' + bookinfo.author + '</p>'
            '<h2>Table of Contents</h2>'
            exports.renderToc(toc).replace(/<ol/g, '<ul').replace(/<\/ol>/g, '</ul>')
            nav
        ].join('\n')
    }))

    console.log('Generate index...')

    nav = exports.renderLinearNav(linear[linear.length - 2], null, '../')

    try: fs.mkdirSync(path.join(dirname, 'index'))
    fs.writeFileSync(path.join(dirname, 'index/index.html'), fillTemplate(template, {
        title: bookinfo.title
        toc: exports.renderToc(toc, '../', 'index/')
        relative: '../'
        main: [
            '<h1>Index</h1>'
            exports.renderIndex(keywords, '../', dirname)
            nav
        ].join('\n')
    }))

    console.log('Copy resources...')

    fs.writeFileSync(path.join(dirname, 'reticule.css'), fs.readFileSync('../view/reticule.css'))
    code = milk.compile(fs.readFileSync('../view/reticule.milk', 'utf8'))
    fs.writeFileSync(path.join(dirname, 'reticule.js'), code)

    console.log('Done.')
