fs = require('fs')
path = require('path')
marked = require('marked')

getInfo = JSON.parse @ fs.readFileSync(_, 'utf8') @ path.join
exports.getBookInfo = getInfo(_, 'book.json')
exports.getSectionInfo = getInfo(_, 'section.json')

function readdirRecursive(dirname):
    items = [path.join(dirname, item) for item in fs.readdirSync(dirname)]

    for item in items if fs.statSync(item).isDirectory():
        items = items.concat(readdirRecursive(item))

    return items

exports.getToc = function(dirname):
    items = [path.join(dirname, item) for item in fs.readdirSync(dirname)]
    toc = []

    for item in items: try:
        info = exports.getSectionInfo(item)
        subtoc = exports.getToc(item)

        if subtoc.length > 0: info.toc = subtoc
        toc.push(info)

    return toc

exports.extractTags = function(filename):
    tags = []

    try:
        content = fs.readFileSync(filename, 'utf8').replace(/\r\n/g, '\n').split('\n')
        tagheaders = [first, ...] => first == '#'
        tagslength = content.filter(tagheaders).length

        if length == 0: return []
        for i, l in content if tagheaders(l): break

        while tags.length < tagslength:
            for j in [i + 1 ...] if !content[j] || tagheaders(content[j]): break
            tags.push(exports.parseTag(content[i ... j - 1]))
            i = j

    return tags

exports.parseTag = function(lines):
    separator = x => x.split('').every(y => y == '-')
    for k in [0...] if !lines[k] || separator(lines[k]): break

    assertion = lines[1 ... k - 1].join('\n')
    proof = k + 1 < lines.length ? lines[k + 1 ...].join('\n') : null

    return { id: lines[0], assertion: assertion, proof: proof }

exports.getDependencies = function(tag):
    renderer = prepareMarkedRenderer()
    options = { renderer: renderer }

    html = [marked(v, options) for k, v in tag if k != 'id'].join('\n')
    regex = /<a href="(\#[^"]*)"/g
    dependencies = []

    while (match = regex.exec(html)) != null:
        dependencies.push(match[1])

    return dependencies

exports.getAllTags = function(dirname):
    files = readdirRecursive(dirname).filter(x => path.basename(x) == 'tags.md')
    tags = []

    for file in files:
        tags = tags.concat(exports.extractTags(file))

    return tags

exports.prepareMarkedRenderer = function():
    marked.setOptions({ smartypants: true })

    renderer = new marked.Renderer()
    renderer.code = code => '$$' + code + '$$'
    renderer.codespan = code => '$' + code + '$'

    return renderer

renderer = exports.prepareMarkedRenderer()
contents = fs.readFileSync('../README.md', 'utf8')
console.log(marked(contents, { renderer: renderer }))
