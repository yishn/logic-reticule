// -*-javascript-*-

fs = require('fs')
path = require('path').posix
diacritic = require('diacritic')
marked = require('marked').setOptions({smartypants: true})
milk = require('milk-lang')
uglify = require('uglify-js')
cssshrink = require('cssshrink')
renderers = require('./renderers')
localization = require('./localization')

ReticuleRenderer = renderers.ReticuleRenderer
TocRenderer = renderers.TocRenderer
LinearTocRenderer = renderers.LinearTocRenderer

cache = {}

function readdirRecursive(dirname):
    items = [path.join(dirname, item) for item in fs.readdirSync(dirname)]

    for item in items if fs.statSync(item).isDirectory():
        items = items.concat(readdirRecursive(item))

    return items

function fillTemplate(template, context):
    escaperegex = x => x.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")

    for k, v in context:
        template = template.replace(new RegExp('{{' + escaperegex(k) + '}}', 'g'), v)

    return template

loadFile = fs.readFileSync(_, 'utf8') @ path.join

exports.getBookInfo = JSON.parse @ loadFile(_, 'book.json')

exports.getToc = loadFile(_, 'toc.md')

exports.getMacros = loadFile(_, 'macros.tex')

exports.getLinearToc = function(toc):
    renderer = new LinearTocRenderer()
    marked(toc, {renderer})
    return renderer.lineartoc

exports.renderToc = function(toc, dirname, currentpath):
    return marked(toc, {renderer: new TocRenderer(dirname, currentpath)})

exports.extractTags = function(filename, dirname):
    if filename not in cache:
        tags = []

        try:
            content = loadFile(filename).replace(/\r\n/g, '\n').split('\n')
            tagheaders = [first, ...] => first == '#'
            tagslength = content.filter(tagheaders).length

            if tagslength == 0: return []
            for i, l in content if tagheaders(l): break

            while tags.length < tagslength:
                for j in [i + 1 ...] if j == content.length || tagheaders(content[j]): break

                tag = exports.parseTag(content[i ... j - 1])
                tag.path = path.join(path.relative(dirname, path.join(filename, '..')), './')
                tags.push(tag)

                i = j

        cache[filename] = tags

    return cache[filename]

exports.renderTags = function(tags, dirname):
    output = ''
    keywords = {}
    __ = localization.get(dirname, _)

    for tag in tags:
        renderer = new ReticuleRenderer(dirname, tag.path)
        options = {renderer}

        prefix = '<p><a class="label" href="' + tag.id + '">'
        if tag.type.trim() != '':
            prefix += tag.type + ' ' + tag.id[1...].replace(/-/g, '.') + '.'
        else:
            prefix += __('&para;')
        prefix += '</a></p>\n'

        output += '<article id="' + tag.id[1...] + '">\n'
            + prefix
            + marked(tag.assertion, options) + '\n'

        if tag.proof != null:
            output += '<p><em class="label">'
                + __('Proof.')
                + '</em></p>\n<section class="proof">\n'
                + marked(tag.proof, options)
                + '\n<p class="qed">'
                + __('$\\square$')
                + '</p>\n</section>'

        output += '</article>\n'

        for [keyword, context] in renderer.keywords:
            tuple = [tag.path, tag.id]
            if context != '': tuple.push(context)

            if keyword not in keywords:
                keywords[keyword] = [tuple]
            else:
                keywords[keyword].push(tuple)

    return [output, keywords]

exports.parseTag = function(lines):
    separator = x => x != '' && x.split('').every(y => y == '-')
    for k in [0...] if k == lines.length || separator(lines[k]): break

    j = lines[0].indexOf(':')
    id = j == -1 ? lines[0] : lines[0].substring(0, j)
    type = j == -1 ? '' : lines[0].substring(j + 1)
    assertion = lines[1 ... k - 1].join('\n').trim()
    proof = k + 1 < lines.length
        ? lines[k + 1 ...].join('\n').trim()
        : null

    return {id, type, assertion, proof}

exports.renderIndex = function(data, relative = './'):
    output = '<ul class="nav" id="nav">'

    compare = (p, q, f) => f(p) == f(q) ? 0 : f(p) < f(q) ? -1 : 1
    map = x => diacritic.clean(x).toLowerCase().replace(/[^0-9a-zA-Z]/g, '')
    getAlpha = x => (a = map(x)[0]) == parseInt(a, 10) ? '#' : a

    keys = Object.keys(data)
    keys.sort(compare(_, _, map))

    if keys.length == 0: return ''

    // Create alphas
    alphas = []
    for alpha in keys.map(getAlpha) if alpha not in alphas:
        alphas.push(alpha)

    for alpha in "#abcdefghijklmnopqrstuvwxyz":
        slug = alpha == '#' ? 'num' : alpha
        if alpha in alphas:
            output += '<li><a href="#' + slug + '">' + alpha.toUpperCase() + '</a></li> '
        else:
            output += '<li><span>' + alpha.toUpperCase() + '</span></li> '

    output += '</ul>\n<article>\n'

    // Generate tables
    for alpha in alphas:
        slug = alpha == '#' ? 'num' : alpha
        output += '<h2 class="alpha" id="' + slug + '"><a href="#nav">' + alpha + '</a></h2>\n'
            + '<ul class="index">\n'

        for keyword in keys.filter(x => getAlpha(x) == alpha):
            output += '<li>' + keyword + ' '

            for [p, id, context = ''] in data[keyword]:
                output += '<a href="' + path.join(relative, p) + id
                    + '" data-path="' + p + id + '" class="tag index">'
                output += context.trim() != '' ? context : id
                output += '</a> '

            output += '</li>\n'

        output += '</ul>\n'

    return output + '</article>'

exports.renderLinearNav = function(prev, next, relative = './'):
    output = '<p class="nav">\n'

    if prev != null:
        output += '<a href="' + path.join(relative, prev.path) + '" class="prev">&laquo; ' + prev.title + '</a>\n'
    if next != null:
        output += '<a href="' + path.join(relative, next.path) + '" class="next">' + next.title + ' &raquo;</a>\n'

    return output + '</p>'

exports.getAllTags = function(dirname):
    if dirname not in cache:
        files = readdirRecursive(dirname).filter(x => path.basename(x) == 'tags.md')
        tags = []

        for file in files:
            tags = tags.concat(exports.extractTags(file, dirname))

        cache[dirname] = tags

    return cache[dirname]

exports.getTagById = function(dirname, id):
    return exports.getAllTags(dirname).filter(tag => tag.id == id)[0]

exports.buildReticule = function(dirname):
    __ = localization.get(dirname, _)
    execPath = process.argv[1]
    if process.platform == 'win32': execPath = execPath.replace(/\\/g, '/')

    template = loadFile(execPath, '../../view/index.html')
    bookinfo = exports.getBookInfo(dirname)
    renderer = new ReticuleRenderer(dirname, dirname)
    macros = ''
    try: macros = marked(exports.getMacros(dirname).split('\n').map(x => '    ' + x).join('\n'), {renderer})

    console.log('Generate table of contents...')

    toc = exports.getToc(dirname)
    linear = exports.getLinearToc(toc)

    alltags = exports.getAllTags(dirname)
    items = []
    keywords = {}

    for item in alltags.map(tag => tag.path) if item not in items:
        items.push(item)
        console.log('Processing ' + item + '...')

        try: fs.statSync | path.join(dirname, item, 'tags.md')
        catch: continue

        // Look for prev/next section
        relative = path.join(path.relative(path.join(dirname, item), dirname), './')

        for k, i in linear if i.path == item: break
        nav = exports.renderLinearNav(linear[k - 1] ?? {
            title: __('Table of Contents')
            path: './'
        }, linear[k + 1], relative)

        // Load data
        sectioninfo = linear[k]
        tags = exports.extractTags(path.join(dirname, item, 'tags.md'), dirname)
        [html, kw] = exports.renderTags(tags, dirname)

        // Handle index
        for keyword, value in kw:
            if keyword not in keywords:
                keywords[keyword] = value
            else:
                keywords[keyword] = keywords[keyword].concat(value)

        // Write data
        fs.writeFileSync(path.join(dirname, item, 'index.html'), fillTemplate(template, {
            lang: bookinfo.lang ?? 'en'
            title: bookinfo.title
            section: sectioninfo.title
            macros
            toc: exports.renderToc(toc, dirname, item)
            relative
            main: [
                '<h1>' + sectioninfo.title + '</h1>'
                nav
                html
                nav
            ].join('\n')
        }))

    console.log('Create front page...')

    nav = exports.renderLinearNav(null, linear[0], './')
    renderedtoc = exports.renderToc(toc, dirname, './')

    fs.writeFileSync(path.join(dirname, 'index.html'), fillTemplate(template, {
        lang: bookinfo.lang ?? 'en'
        title: bookinfo.title
        section: __('Table of Contents')
        toc: renderedtoc
        macros
        relative: './'
        main: [
            '<h1>' + bookinfo.title + '</h1>'
            marked(bookinfo.author).replace('<p>', '<p class="meta">')
            '<article>'
            '<h2>' + __('Table of Contents') + '</h2>'
            renderedtoc.replace(/<ol/g, '<ul').replace(/<\/ol>/g, '</ul>')
            '</article>'
            nav
        ].join('\n')
    }))

    console.log('Generate index...')

    nav = exports.renderLinearNav(linear[linear.length - 2], null, '../')

    try: fs.mkdirSync | path.join(dirname, 'index')

    fs.writeFileSync(_, JSON.stringify(keywords))
        | path.join(dirname, 'index/keywords.json')

    fs.writeFileSync(path.join(dirname, 'index/index.html'), fillTemplate(template, {
        lang: bookinfo.lang ?? 'en'
        title: bookinfo.title
        section: __('Index')
        toc: exports.renderToc(toc, dirname, 'index/')
        macros
        relative: '../'
        main: [
            '<h1>' + __('Index') + '</h1>'
            exports.renderIndex(keywords, '../', dirname)
            nav
        ].join('\n')
    }))

    console.log('Copy resources...')

    fs.writeFileSync(path.join(dirname, 'favicon.ico'), _)
        | fs.readFileSync
        | path.join(execPath, '../../view/favicon.ico')

    fs.writeFileSync(path.join(dirname, 'reticule.css'), _)
        | cssshrink.shrink
        | fillTemplate(_, {accent: bookinfo.accent ?? '#327CCB'})
        | loadFile(execPath, '../../view/reticule.css')

    fs.writeFileSync(path.join(dirname, 'reticule.js'), _)
        | ({code} => code)
        | uglify.minify(_, {fromString: true})
        | milk.compile
        | loadFile(execPath, '../../view/reticule.milk')

    console.log('Done.')
