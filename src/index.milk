fs = require('fs')
path = require('path')
marked = require('marked').setOptions({ smartypants: true })

function readdirRecursive(dirname):
    items = [path.join(dirname, item) for item in fs.readdirSync(dirname)]

    for item in items if fs.statSync(item).isDirectory():
        items = items.concat(readdirRecursive(item))

    return items

class HtmlRenderer extends marked.Renderer:
    function code(code):
        return '$$' + code + '$$'

    function codespan(code):
        return '$' + code + '$'

    function link(href, title, text):
        if href[0] == '#':
            tag = getTagById(href)
            href = '#tag=' + tag.path + tag.id

        out = '<a href="' + href + '"'
        if title: out += ' title="' + title + '"'
        out += '>' + text + '</a>'

        return out

    function toc(toc):
        options = { renderer: new HtmlRenderer() }
        output = ['<ol>']

        for item in toc:
            title = marked(item.title, options)
            li = '<li><a href="#section=' + item.path + '">' + title + '</a> '

            if item.toc != null:
                subtoc = self.toc(item.toc)
                li += subtoc

            li += '</li>'
            output.push(li)

        output.push('</ol>')
        return output.join('\n')

getInfo = JSON.parse @ fs.readFileSync(_, 'utf8') @ path.join

exports.getBookInfo = getInfo(_, 'book.json')

exports.getSectionInfo = getInfo(_, 'section.json')

exports.getToc = function(dirname):
    items = [path.join(dirname, item) for item in fs.readdirSync(dirname)]
    toc = []

    for item in items: try:
        info = exports.getSectionInfo(item)
        info.path = item
        subtoc = exports.getToc(item)

        if subtoc.length > 0: info.toc = subtoc
        toc.push(info)

    return toc

exports.extractTags = function(filename):
    tags = []

    try:
        content = fs.readFileSync(filename, 'utf8').replace(/\r\n/g, '\n').split('\n')
        tagheaders = [first, ...] => first == '#'
        tagslength = content.filter(tagheaders).length

        if length == 0: return []
        for i, l in content if tagheaders(l): break

        while tags.length < tagslength:
            for j in [i + 1 ...] if !content[j] || tagheaders(content[j]): break

            tag = exports.parseTag(content[i ... j - 1])
            tag.path = path.join(filename, '..')
            tags.push(tag)

            i = j

    return tags

exports.parseTag = function(lines):
    separator = x => x.split('').every(y => y == '-')
    for k in [0...] if !lines[k] || separator(lines[k]): break

    assertion = lines[1 ... k - 1].join('\n')
    proof = k + 1 < lines.length ? lines[k + 1 ...].join('\n') : null

    return { id: lines[0], assertion, proof }

exports.getAllTags = function(dirname):
    files = readdirRecursive(dirname).filter(x => path.basename(x) == 'tags.md')
    tags = []

    for file in files:
        tags = tags.concat(exports.extractTags(file))

    return tags

exports.getTagById = function(dirname, id):
    return exports.getAllTags(dirname).filter(tag => tag.id == id)[0] ?? null
